AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  RetoTecnico

  SAM Template for RetoTecnico
Globals:
  Function:
    Timeout: 3

    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
  
Resources:
  # SNS Topic
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: AppointmentTopic
  
  # SQS Queue
  SQSPe:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: SQS_PE


  SNSSubscriptionCL:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: 'arn:aws:sns:REGION:ACCOUNT_ID:TOPIC_NAME'
      Protocol: lambda
      Endpoint: !GetAtt AppointmentCL.Arn
      FilterPolicy:
        countryISO:
          - CL

  SNSSubscriptionPe:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: 'arn:aws:sns:REGION:ACCOUNT_ID:TOPIC_NAME'
      Protocol: lambda
      Endpoint: !GetAtt AppointmentPe.Arn
      FilterPolicy:
        countryISO:
          - PE

# API Gateway REST API
  AddCita:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
      - x86_64
      Events:
          CitaReservation:
            Type: Api
            Properties:
              Path: /reservation
              Method: post
      Environment:
        Variables:
          SNS_TOPIC_ARN: 
            Ref: SNSTopic
          DbHost: ""
          BbUser: ""
          BbPassword: ""
    Metadata:
      DockerTag: nodejs22.x-v1
      DockerContext: ./src
      Dockerfile: Dockerfile

  AppointmentCL:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/appointmentCL.handler
      Runtime: nodejs22.x
      Environment:
        Variables:
          DbHost: "chile-db-host"
          DbUser: "chile-db-user"
          DbPassword: "chile-db-password"

  AppointmentPe:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/appointmentPe.handler
      Runtime: nodejs22.x
      Environment:
        Variables:
          DbHost: "peru-db-host"
          DbUser: "peru-db-user"
          DbPassword: "peru-db-password"